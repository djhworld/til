<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>TIL - Today I Learned - til.djharper.dev - golang</title>
	<subtitle>website</subtitle>
	<link href="https://til.djharper.dev/tags/golang/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://til.djharper.dev"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2021-05-08T00:00:00+00:00</updated>
	<id>https://til.djharper.dev/tags/golang/atom.xml</id>
	<entry xml:lang="en">
		<title>Golang Snippets</title>
		<published>2021-05-08T00:00:00+00:00</published>
		<updated>2021-05-08T00:00:00+00:00</updated>
		<link href="https://til.djharper.dev/golang-snippets/" type="text/html"/>
		<id>https://til.djharper.dev/golang-snippets/</id>
		<content type="html">&lt;p&gt;Just some snippets I regularly refer to &lt;&#x2F;p&gt;
&lt;p&gt;Reading from Stdin&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#272822;&quot;&gt;
&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;main

 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;bufio&amp;quot;
   &amp;quot;fmt&amp;quot;
   &amp;quot;os&amp;quot;
 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)

 &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;() {
   scanner &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;bufio.NewScanner(os.Stdin)
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;scanner.Scan() {
     fmt.Println(scanner.Text()) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Println will add back the final &amp;#39;\n&amp;#39;
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;}
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;scanner.Err(); err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;{
     fmt.Fprintln(os.Stderr, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;reading standard input:&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, err)
   }
 }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Simple web server&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#272822;&quot;&gt;
&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;main

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;fmt&amp;quot;
    &amp;quot;net&#x2F;http&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)

&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;handler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;w &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;http.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;ResponseWriter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;http.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;Request&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;) {
    fmt.Fprintf(w, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;Hi there, I love &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;!&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, r.URL.Path[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;:])
 }

&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;() {
    http.HandleFunc(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;&#x2F;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, handler)
    http.ListenAndServe(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;:8080&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Deserialising JSON&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#272822;&quot;&gt;
&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;main

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;encoding&#x2F;json&amp;quot;
  &amp;quot;fmt&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)

&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;() {
  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;jsonBlob &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;`[
    {&amp;quot;Name&amp;quot;: &amp;quot;Platypus&amp;quot;, &amp;quot;Order&amp;quot;: &amp;quot;Monotremata&amp;quot;},
    {&amp;quot;Name&amp;quot;: &amp;quot;Quoll&amp;quot;,    &amp;quot;Order&amp;quot;: &amp;quot;Dasyuromorphia&amp;quot;}
  ]`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)
  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Animal &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;{
    Name  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;string
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Order &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;string
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;}
  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;animals []&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;Animal
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;json.Unmarshal(jsonBlob, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;animals)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;{
    fmt.Println(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;error:&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, err)
  }
  fmt.Printf(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;%+v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, animals)
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Partition a list by batch size&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#272822;&quot;&gt;
&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;min&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;b &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;b {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;a
    }
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;b
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(records); i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;500 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;{
        batch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;records[i:min(i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;500&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(records))]
        fmt.Println(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;Submitting batch of&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(batch), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;records&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)
    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Use TLS cert in http request&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#272822;&quot;&gt;
&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;cert, err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;tls.LoadX509KeyPair(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;&amp;lt;CERT&amp;gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;&amp;lt;KEY&amp;gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)
       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;{
               fmt.Println(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;Failed&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, err)
               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;return
       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;}
       tr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;:= &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;http.Transport{
               TLSClientConfig: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;tls.Config{
                       Certificates: []tls.Certificate{cert},
               },
       }
       client &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;:= &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;http.Client{Transport: tr}
       client.Get(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;endpoint&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Sorting a slice of things using an anonymous function&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#272822;&quot;&gt;
&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;myslice [][]byte
...
sort.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;Slice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(myslice, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;j &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;bytes.Compare(myslice[i], myslice[j]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;})
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;</content>
	</entry>
	<entry xml:lang="en">
		<title>Golang JSON marshaller will replace some characters in strings with unicode runes</title>
		<published>2021-05-05T00:00:00+00:00</published>
		<updated>2021-05-05T00:00:00+00:00</updated>
		<link href="https://til.djharper.dev/golang-json-gotchas/" type="text/html"/>
		<id>https://til.djharper.dev/golang-json-gotchas/</id>
		<content type="html">&lt;p&gt;By &lt;a href=&quot;https:&#x2F;&#x2F;golang.org&#x2F;pkg&#x2F;encoding&#x2F;json&#x2F;&quot;&gt;default the Golang JSON encoder&lt;&#x2F;a&gt; will replace certain characters in strings with their unicode equivalent &lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;String values encode as JSON strings coerced to valid UTF-8, replacing invalid bytes with the Unicode replacement rune. So that the JSON will be safe to embed inside HTML &amp;lt;script&amp;gt; tags, the string is encoded using HTMLEscape, which replaces &amp;quot;&amp;lt;&amp;quot;, &amp;quot;&amp;gt;&amp;quot;, &amp;quot;&amp;amp;&amp;quot;, U+2028, and U+2029 are escaped to &amp;quot;\u003c&amp;quot;,&amp;quot;\u003e&amp;quot;, &amp;quot;\u0026&amp;quot;, &amp;quot;\u2028&amp;quot;, and &amp;quot;\u2029&amp;quot;. This replacement can be disabled when using an Encoder, by calling &lt;code&gt;SetEscapeHTML(false)&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;You can disable the behaviour if required but it might catch you out if the JSON parser at the other end is crap and doesn&#x27;t support unicode.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>You can use testing.Skip() instead of build tags for integration tests</title>
		<published>2021-05-05T00:00:00+00:00</published>
		<updated>2021-05-05T00:00:00+00:00</updated>
		<link href="https://til.djharper.dev/integration-testing-using-skip/" type="text/html"/>
		<id>https://til.djharper.dev/integration-testing-using-skip/</id>
		<content type="html">&lt;p&gt;A pattern I&#x27;ve seen often in Go is to use build tags for integration tests, so you could exclude them when running &lt;code&gt;go test&lt;&#x2F;code&gt; &lt;&#x2F;p&gt;
&lt;p&gt;This works OK but has some pitfalls, especially around IDEs and other tooling which often does not lint or compile build tags unless explicity set, so compiler errors will not surface.&lt;&#x2F;p&gt;
&lt;p&gt;After reading &lt;a href=&quot;https:&#x2F;&#x2F;peter.bourgon.org&#x2F;blog&#x2F;2021&#x2F;04&#x2F;02&#x2F;dont-use-build-tags-for-integration-tests.html&quot;&gt;dont-use-build-tags-for-integration-tests&lt;&#x2F;a&gt; I&#x27;ve started to try using the &lt;code&gt;t.Skip()&lt;&#x2F;code&gt; instead with an environment variable.&lt;&#x2F;p&gt;
&lt;p&gt;For example: &lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#272822;&quot;&gt;
&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;TestIntegration&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;testing.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;) {
	integrationFlag &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;os.Getenv(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;INTEGRATION&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;integrationFlag &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;{
		t.Skip(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;set INTEGRATION to run this test&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)
	}

	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;</content>
	</entry>
</feed>
